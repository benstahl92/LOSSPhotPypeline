# standard imports
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# internal imports
from LOSSPhotPypeline.image.Phot import Phot

def genconf(object = None, targetname = None, config_file = None):
    '''
    generates template configuration file in current directory

    Parameters
    ----------
    object : LPP instance, optional, default: None
        instance of LPP class from LOSSPhotPypeline.pipeline 
    targetname : str, optional, default: None
        name of sn
    config_file : str, optional, default: None
        name of configuration file to use
    '''

    if object is not None:
        targetname = object.targetname
        config_file = object.config_file
    elif (targetname is None) or (config_file is None):
        print('must either pass LPP object or both target and configuration file names')
        return

    with open(config_file, 'w') as f:
        f.write('{:<20}{}\n'.format('targetname', targetname))
        f.write('{:<20}\n'.format('targetra'))
        f.write('{:<20}\n'.format('targetdec'))
        f.write('{:<20}no\n'.format('photsub'))
        f.write('{:<20}apt\n'.format('calmethod'))
        f.write('{:<20}all\n'.format('photmethod'))
        f.write('{:<20}\n'.format('refname'))
        f.write('{:<20}{}.photlist\n'.format('photlistfile', targetname))

def get_first_obs_date(object):
    '''
    finds earliest image file (determined automatically if LPP pipeline is run from beginning)

    Parameters
    ----------
    object : LPP instance, optional, default: None
        instance of LPP class from LOSSPhotPypeline.pipeline 
    '''
    
    first_obs = None
    for fl in object.image_list:
        c = Phot(fl, object.radecfile)
        if (first_obs is None) or (c.mjd < first_obs):
            first_obs = c.mjd
    return first_obs

def plot_lc(lc_file, name = None, photmethod = None, offset = 1, filters = ('B','V','R','I','CLEAR'),
            tref = None, style = 'white', context = 'notebook', return_fig = False):
    '''
    Plots light curve files generated by LOSSPhotPypeline and saves figure.

    Parameters
    ----------
    lc_file : str
        name of file containing light curve to plot
    name : str, optional, default: None
        name of sn
    photmethod : str, optional, default: None
        photometry method used to obtain light curve
    offset : int or float, optional, default: 1
        magnitude offset to use between filters
    filters : iterable, optional, default: ('B','V','R','I','CLEAR')
        photometric passbands to plot
    tref : int or float, optional, default: None
        time to reference all others to
    style : str, optional, default: 'white'
        seaborn plot style to use
    context : str, optional, default: 'notebook'
        seaborn context to use
    return_fig : bool, optional, default : False
        return figure and axes if True
    '''
    
    # helper function to set colors
    def color_selector(filt):
        if filt == 'B':
            return 'blue'
        elif filt == 'V':
            return 'green'
        elif filt == 'R':
            return 'red'
        elif filt == 'I':
            return 'darkred'
        else:
            return 'black'
        
    # read light curve
    lc = pd.read_csv(lc_file, delim_whitespace = True, comment = ';')
    
    # set time relative to reference
    if tref is None:
        tref = lc['MJD'].min()
    t = lc['MJD'] - tref
    
    # set plot attributes
    sns.set_style(style)
    sns.set_context(context)
    
    # generate plot
    fig, ax = plt.subplots(1,1)
    for i, filt in enumerate(filters):
        if offset is None:
            msg = filt
        else:
            msg = '{} + {}'.format(filt, + i*offset)
        ax.errorbar(t, lc[filt] + i*offset, yerr = lc['E{}'.format(filt)], fmt = '.',
                    c = color_selector(filt), label = msg)
    ax.invert_yaxis()
    ax.set_xlabel('Time (MJD - {:.1f})'.format(tref))
    ax.set_ylabel('Mag')
    if name is not None:
        title_msg = name
        if photmethod is not None:
            title_msg += ' ({})'.format(photmethod)
    ax.set_title(title_msg)
    ax.legend()
    plt.tight_layout()
    if return_fig:
        return fig, ax
    else:
        plt.savefig('{}.ps'.format(lc_file.split('.dat')[0]), bbox_inches = 'tight')